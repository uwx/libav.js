name: build-and-test
run-name: Build and test ${{ github.sha }}
on: [push, workflow_dispatch]

env:
  EM_VERSION: latest
  EM_CACHE_FOLDER: 'cache-emsdk'

permissions:
  contents: write
  id-token: write

jobs:
  pre:
    runs-on: ubuntu-20.04
    env:
      FFMPEG_VERSION_MAJOR: 'unset'
      FFMPEG_VERSION_MINREV: 'unset'
      FFMPEG_VERSION: 'unset'

      LIBAVJS_VERSION_BASE: 'unset'
      LIBAVJS_VERSION_SUFFIX: 'unset'
      LIBAVJS_VERSION: 'unset'

      GITHUB_SHA_SHORT: 'unset'

    steps:
      - name: Generate build number
        id: buildnumber
        uses: onyxmueller/build-tag-number@v1
        with:
          token: ${{ github.token }}

      - run: |
          FFMPEG_VERSION_MAJOR="6"
          FFMPEG_VERSION_MINREV="1.1"
          FFMPEG_VERSION="$FFMPEG_VERSION_MAJOR.$FFMPEG_VERSION_MINREV"

          GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)

          echo "GITHUB_SHA_SHORT=$GITHUB_SHA_SHORT" >> "$GITHUB_ENV"

          BUILD_NUMBER="${{ steps.buildnumber.outputs.build_number }}"

          LIBAVJS_VERSION_BASE="6.0.0"
          LIBAVJS_VERSION_SUFFIX="-nightly.$BUILD_NUMBER.$GITHUB_SHA_SHORT.ffmpeg.$FFMPEG_VERSION"
          LIBAVJS_VERSION="$LIBAVJS_VERSION_BASE$LIBAVJS_VERSION_SUFFIX"

          echo "FFMPEG_VERSION_MAJOR=$FFMPEG_VERSION_MAJOR" >> "$GITHUB_ENV"
          echo "FFMPEG_VERSION_MINREV=$FFMPEG_VERSION_MINREV" >> "$GITHUB_ENV"
          echo "FFMPEG_VERSION=$FFMPEG_VERSION" >> "$GITHUB_ENV"

          echo "LIBAVJS_VERSION_BASE=$LIBAVJS_VERSION_BASE" >> "$GITHUB_ENV"
          echo "LIBAVJS_VERSION_SUFFIX=$LIBAVJS_VERSION_SUFFIX" >> "$GITHUB_ENV"
          echo "LIBAVJS_VERSION=$LIBAVJS_VERSION" >> "$GITHUB_ENV"

    outputs:
      build_number: ${{ steps.buildnumber.outputs.build_number }}
      sha: ${{ env.GITHUB_SHA_SHORT }}

      FFMPEG_VERSION_MAJOR: ${{ env.FFMPEG_VERSION_MAJOR }}
      FFMPEG_VERSION_MINREV: ${{ env.FFMPEG_VERSION_MINREV }}
      FFMPEG_VERSION: ${{ env.FFMPEG_VERSION }}

      LIBAVJS_VERSION_BASE: ${{ env.LIBAVJS_VERSION_BASE }}
      LIBAVJS_VERSION_SUFFIX: ${{ env.LIBAVJS_VERSION_SUFFIX }}
      LIBAVJS_VERSION: ${{ env.LIBAVJS_VERSION }}


  #build:
  #  # This should be ubuntu-24.04, but as of 2023-10-06ish, it has problems
  #  runs-on: ubuntu-20.04
  #  needs: [pre]
  #  env:
  #    FFMPEG_VERSION_MAJOR: ${{ needs.pre.outputs.FFMPEG_VERSION_MAJOR }}
  #    FFMPEG_VERSION_MINREV: ${{ needs.pre.outputs.FFMPEG_VERSION_MINREV }}
  #    FFMPEG_VERSION: ${{ needs.pre.outputs.FFMPEG_VERSION }}
  #    LIBAVJS_VERSION_BASE: ${{ needs.pre.outputs.LIBAVJS_VERSION_BASE }}
  #    LIBAVJS_VERSION_SUFFIX: ${{ needs.pre.outputs.LIBAVJS_VERSION_SUFFIX }}
  #    LIBAVJS_VERSION: ${{ needs.pre.outputs.LIBAVJS_VERSION }}

  #  if: '!contains(github.event.head_commit.message, "skip ci")'

  #  steps:
  #    - uses: actions/checkout@v3

  #    - uses: actions/setup-node@v3
  #      with:
  #        node-version: '20'
  #        registry-url: 'https://registry.npmjs.org'

  #    - uses: mymindstorm/setup-emsdk@v12
  #      with:
  #        version: ${{env.EM_VERSION}}
  #        actions-cache-folder: ${{env.EM_CACHE_FOLDER}}
  #        no-cache: true

  #    - uses: actions/cache@v3
  #      name: Cache system libraries
  #      with:
  #        path: ${{env.EM_CACHE_FOLDER}}
  #        key: ${{env.EM_VERSION}}-${{ runner.os }}-${{github.job}}

  #    - uses: actions/cache@v3
  #      name: Cache dependencies
  #      with:
  #        key: cache-dependencies-${{ hashFiles('mk/*') }}
  #        path: build/*.tar*

  #    - name: 'Run m4 on all *.m4 files'
  #      run: |
  #        for i in $(find -name "*.m4"); do
  #          m4 $i > "$(dirname $i)/$(basename $i .m4)"
  #        done

  #    - name: Generate configs
  #      run: |
  #        cd configs
  #        node mkconfigs
  #        cd ..

  #    - run: make extract

  #    - run: make release -j9 LIBAVJS_VERSION=$LIBAVJS_VERSION LIBAVJS_VERSION_SUFFIX=$LIBAVJS_VERSION_SUFFIX

  #    - uses: actions/upload-artifact@v3
  #      with:
  #        name: build
  #        path: dist/release/libav.js-*.zip

  #    - run: |
  #        cd dist/release && unzip libav.js-$LIBAVJS_VERSION.zip
  #        cd libav.js-$LIBAVJS_VERSION

  #        sed 's/@VER/$LIBAVJS_VERSION/g' ../../../package.json > package.json
  #        rm -f dist/*.dbg.* dist/*.asm.mjs
  #        npm publish --access=public
  #      env:
  #        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  #    #- run: make
  #    #- run: make build-all
  #    #- run: npm test

  build-variant:
    needs: [pre]
    strategy:
      fail-fast: false
      matrix:
        variant: [
          default, default-cli, opus, opus-af, flac, flac-af, wav, wav-af, obsolete, webm, webm-cli, webm-vp9, webm-vp9-cli, vp8-opus, vp8-opus-avf, vp9-opus, vp9-opus-avf, av1-opus, av1-opus-avf, webcodecs, webcodecs-avf, all, fat
        ]

    env:
      FFMPEG_VERSION_MAJOR: ${{ needs.pre.outputs.FFMPEG_VERSION_MAJOR }}
      FFMPEG_VERSION_MINREV: ${{ needs.pre.outputs.FFMPEG_VERSION_MINREV }}
      FFMPEG_VERSION: ${{ needs.pre.outputs.FFMPEG_VERSION }}
      LIBAVJS_VERSION_BASE: ${{ needs.pre.outputs.LIBAVJS_VERSION_BASE }}
      LIBAVJS_VERSION_SUFFIX: ${{ needs.pre.outputs.LIBAVJS_VERSION_SUFFIX }}
      LIBAVJS_VERSION: ${{ needs.pre.outputs.LIBAVJS_VERSION }}

    if: |
      !contains(github.event.head_commit.message, 'skip ci')

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      ## workaround for broken clang on ubuntu runner until https://github.com/actions/runner-images/issues/8659 get fixed
      #- uses: mjp41/workaround8649@7929373c0fe5caf844d8115adccef39e3b5362e7
      #  with:
      #    os: 'ubuntu-20.04'

      #- name: Install LLVM and Clang
      #  run: |
      #    wget https://apt.llvm.org/llvm.sh
      #    chmod +x llvm.sh
      #    sudo ./llvm.sh 19 all

      - uses: actions/cache@v3
        name: Cache system libraries
        with:
          path: ${{env.EM_CACHE_FOLDER}}
          key: ${{env.EM_VERSION}}-${{ runner.os }}-${{github.job}}-${{matrix.variant}}

      - uses: mymindstorm/setup-emsdk@v12
        with:
          version: ${{env.EM_VERSION}}
          #actions-cache-folder: ${{env.EM_CACHE_FOLDER}}
          no-cache: true

      - uses: actions/cache@v3
        name: Cache dependencies
        with:
          key: cache-dependencies-${{ hashFiles('mk/*') }}-${{ runner.os }}-${{github.job}}
          path: build/*.tar*

      - name: Generate configs
        run: |
          cd configs
          node mkconfigs
          cd ..

      - run: make extract

      - run: |-
          VARIANT="${{matrix.variant}}"

          make release-$VARIANT LIBAVJS_VERSION_SUFFIX=$LIBAVJS_VERSION_SUFFIX

          cp -a README.md docs dist/release/libav.js-$LIBAVJS_VERSION-$VARIANT/

          # make the directory that the lib sources will be dumped into first
          mkdir -p dist/release/libav.js-$LIBAVJS_VERSION/sources

          # get sources for libs
          for t in ffmpeg lame libaom libogg libvorbis libvpx opus zlib;
          do
            make $t-release LIBAVJS_VERSION_SUFFIX=$LIBAVJS_VERSION_SUFFIX
          done

          # copy sources to variant dir
          cp -a dist/release/libav.js-$LIBAVJS_VERSION/sources dist/release/libav.js-$LIBAVJS_VERSION-$VARIANT/sources/

          git archive HEAD -o dist/release/libav.js-$LIBAVJS_VERSION-$VARIANT/sources/libav.js.tar
          xz dist/release/libav.js-$LIBAVJS_VERSION-$VARIANT/sources/libav.js.tar
          cd dist/release && zip -r libav.js-$LIBAVJS_VERSION-$VARIANT.zip libav.js-$LIBAVJS_VERSION-$VARIANT
          #rm -rf dist/release/libav.js-$LIBAVJS_VERSION-$VARIANT

      - uses: actions/upload-artifact@v3
        with:
          name: libav.js ${{matrix.variant}}
          path: dist/release/libav.js-*

      - uses: actions/upload-artifact@v3
        with:
          name: libav.js ${{matrix.variant}} (zip)
          path: dist/release/libav.js-*.zip

      - run: |
          cd dist/release/libav.js-$LIBAVJS_VERSION-${{matrix.variant}}
          npm publish --provenance --access=public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      #- uses: actions/upload-artifact@v3
      #  with:
      #    name: dist_release (${{matrix.variant}})
      #    path: dist/release

      #- run: |
      #    FFMPEG_VERSION_MAJOR="6"
      #    FFMPEG_VERSION_MINREV="1.1"
      #    FFMPEG_VERSION="$FFMPEG_VERSION_MAJOR.$FFMPEG_VERSION_MINREV"

      #    LIBAVJS_VERSION_BASE="5.1"
      #    LIBAVJS_VERSION_SUFFIX="-${{ needs.pre.outputs.sha }}"
      #    LIBAVJS_VERSION="$LIBAVJS_VERSION_BASE.$FFMPEG_VERSION$LIBAVJS_VERSION_SUFFIX"

      #    cd dist/release && unzip libav.js-$LIBAVJS_VERSION.zip
      #    cd libav.js-$LIBAVJS_VERSION && \
      #      cp ../../../package.json . && \
      #      rm -f dist/*.dbg.* dist/*.asm.mjs && \
      #      npm publish --access=public
      #  env:
      #    NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-combo:
    needs: [pre, build-variant]

    env:
      FFMPEG_VERSION_MAJOR: ${{ needs.pre.outputs.FFMPEG_VERSION_MAJOR }}
      FFMPEG_VERSION_MINREV: ${{ needs.pre.outputs.FFMPEG_VERSION_MINREV }}
      FFMPEG_VERSION: ${{ needs.pre.outputs.FFMPEG_VERSION }}
      LIBAVJS_VERSION_BASE: ${{ needs.pre.outputs.LIBAVJS_VERSION_BASE }}
      LIBAVJS_VERSION_SUFFIX: ${{ needs.pre.outputs.LIBAVJS_VERSION_SUFFIX }}
      LIBAVJS_VERSION: ${{ needs.pre.outputs.LIBAVJS_VERSION }}

    if: |
      !contains(github.event.head_commit.message, 'skip ci')

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - run: |
          mkdir temp
          cd temp

          for t in default default-cli opus opus-af flac flac-af wav wav-af obsolete webm webm-cli webm-vp9 webm-vp9-cli vp8-opus vp8-opus-avf vp9-opus vp9-opus-avf av1-opus av1-opus-avf webcodecs webcodecs-avf all;
          do
            wget https://registry.npmjs.org/@uwx/libav.js-$t/-/libav.js-$t-$LIBAVJS_VERSION.tgz
            tar -xvf libav.js-$t-$LIBAVJS_VERSION.tgz
          done

          cd package
          rm package.json
          sed 's/@VER/$LIBAVJS_VERSION/g' ../../package.json > package.json

      - run: |
          cd temp/package
          npm publish --provenance --access=public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
